// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: banners.proto

package banners_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannersClient is the client API for Banners service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannersClient interface {
	CreateSlot(ctx context.Context, in *CreateSlotReq, opts ...grpc.CallOption) (*SlotResp, error)
	CreateBanner(ctx context.Context, in *CreateBannerReq, opts ...grpc.CallOption) (*BannerResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*GroupResp, error)
	AddBannerToSlot(ctx context.Context, in *BannerSlotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBannerFromSlot(ctx context.Context, in *BannerSlotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateClickEvent(ctx context.Context, in *ClickEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NextBanner(ctx context.Context, in *NextBannerRequest, opts ...grpc.CallOption) (*NextBannerResponse, error)
}

type bannersClient struct {
	cc grpc.ClientConnInterface
}

func NewBannersClient(cc grpc.ClientConnInterface) BannersClient {
	return &bannersClient{cc}
}

func (c *bannersClient) CreateSlot(ctx context.Context, in *CreateSlotReq, opts ...grpc.CallOption) (*SlotResp, error) {
	out := new(SlotResp)
	err := c.cc.Invoke(ctx, "/banners.Banners/CreateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) CreateBanner(ctx context.Context, in *CreateBannerReq, opts ...grpc.CallOption) (*BannerResp, error) {
	out := new(BannerResp)
	err := c.cc.Invoke(ctx, "/banners.Banners/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*GroupResp, error) {
	out := new(GroupResp)
	err := c.cc.Invoke(ctx, "/banners.Banners/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) AddBannerToSlot(ctx context.Context, in *BannerSlotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/banners.Banners/AddBannerToSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) DeleteBannerFromSlot(ctx context.Context, in *BannerSlotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/banners.Banners/DeleteBannerFromSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) CreateClickEvent(ctx context.Context, in *ClickEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/banners.Banners/CreateClickEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) NextBanner(ctx context.Context, in *NextBannerRequest, opts ...grpc.CallOption) (*NextBannerResponse, error) {
	out := new(NextBannerResponse)
	err := c.cc.Invoke(ctx, "/banners.Banners/NextBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannersServer is the server API for Banners service.
// All implementations must embed UnimplementedBannersServer
// for forward compatibility
type BannersServer interface {
	CreateSlot(context.Context, *CreateSlotReq) (*SlotResp, error)
	CreateBanner(context.Context, *CreateBannerReq) (*BannerResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*GroupResp, error)
	AddBannerToSlot(context.Context, *BannerSlotRequest) (*emptypb.Empty, error)
	DeleteBannerFromSlot(context.Context, *BannerSlotRequest) (*emptypb.Empty, error)
	CreateClickEvent(context.Context, *ClickEvent) (*emptypb.Empty, error)
	NextBanner(context.Context, *NextBannerRequest) (*NextBannerResponse, error)
	mustEmbedUnimplementedBannersServer()
}

// UnimplementedBannersServer must be embedded to have forward compatible implementations.
type UnimplementedBannersServer struct {
}

func (UnimplementedBannersServer) CreateSlot(context.Context, *CreateSlotReq) (*SlotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedBannersServer) CreateBanner(context.Context, *CreateBannerReq) (*BannerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedBannersServer) CreateGroup(context.Context, *CreateGroupReq) (*GroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedBannersServer) AddBannerToSlot(context.Context, *BannerSlotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerToSlot not implemented")
}
func (UnimplementedBannersServer) DeleteBannerFromSlot(context.Context, *BannerSlotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBannerFromSlot not implemented")
}
func (UnimplementedBannersServer) CreateClickEvent(context.Context, *ClickEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClickEvent not implemented")
}
func (UnimplementedBannersServer) NextBanner(context.Context, *NextBannerRequest) (*NextBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextBanner not implemented")
}
func (UnimplementedBannersServer) mustEmbedUnimplementedBannersServer() {}

// UnsafeBannersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannersServer will
// result in compilation errors.
type UnsafeBannersServer interface {
	mustEmbedUnimplementedBannersServer()
}

func RegisterBannersServer(s grpc.ServiceRegistrar, srv BannersServer) {
	s.RegisterService(&Banners_ServiceDesc, srv)
}

func _Banners_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/CreateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).CreateSlot(ctx, req.(*CreateSlotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).CreateBanner(ctx, req.(*CreateBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_AddBannerToSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).AddBannerToSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/AddBannerToSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).AddBannerToSlot(ctx, req.(*BannerSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_DeleteBannerFromSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).DeleteBannerFromSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/DeleteBannerFromSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).DeleteBannerFromSlot(ctx, req.(*BannerSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_CreateClickEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).CreateClickEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/CreateClickEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).CreateClickEvent(ctx, req.(*ClickEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_NextBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).NextBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.Banners/NextBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).NextBanner(ctx, req.(*NextBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Banners_ServiceDesc is the grpc.ServiceDesc for Banners service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Banners_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banners.Banners",
	HandlerType: (*BannersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSlot",
			Handler:    _Banners_CreateSlot_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _Banners_CreateBanner_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Banners_CreateGroup_Handler,
		},
		{
			MethodName: "AddBannerToSlot",
			Handler:    _Banners_AddBannerToSlot_Handler,
		},
		{
			MethodName: "DeleteBannerFromSlot",
			Handler:    _Banners_DeleteBannerFromSlot_Handler,
		},
		{
			MethodName: "CreateClickEvent",
			Handler:    _Banners_CreateClickEvent_Handler,
		},
		{
			MethodName: "NextBanner",
			Handler:    _Banners_NextBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banners.proto",
}
