// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/Arkosh744/banners/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddBannerToSlot mocks base method.
func (m *MockRepository) AddBannerToSlot(ctx context.Context, req *models.BannerSlotRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannerToSlot", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBannerToSlot indicates an expected call of AddBannerToSlot.
func (mr *MockRepositoryMockRecorder) AddBannerToSlot(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannerToSlot", reflect.TypeOf((*MockRepository)(nil).AddBannerToSlot), ctx, req)
}

// CreateBanner mocks base method.
func (m *MockRepository) CreateBanner(ctx context.Context, description string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", ctx, description)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockRepositoryMockRecorder) CreateBanner(ctx, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockRepository)(nil).CreateBanner), ctx, description)
}

// CreateClickEvent mocks base method.
func (m *MockRepository) CreateClickEvent(ctx context.Context, req *models.EventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClickEvent", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClickEvent indicates an expected call of CreateClickEvent.
func (mr *MockRepositoryMockRecorder) CreateClickEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClickEvent", reflect.TypeOf((*MockRepository)(nil).CreateClickEvent), ctx, req)
}

// CreateSlot mocks base method.
func (m *MockRepository) CreateSlot(ctx context.Context, description string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlot", ctx, description)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlot indicates an expected call of CreateSlot.
func (mr *MockRepositoryMockRecorder) CreateSlot(ctx, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlot", reflect.TypeOf((*MockRepository)(nil).CreateSlot), ctx, description)
}

// CreateSocGroup mocks base method.
func (m *MockRepository) CreateSocGroup(ctx context.Context, description string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSocGroup", ctx, description)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSocGroup indicates an expected call of CreateSocGroup.
func (mr *MockRepositoryMockRecorder) CreateSocGroup(ctx, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSocGroup", reflect.TypeOf((*MockRepository)(nil).CreateSocGroup), ctx, description)
}

// DeleteBannerSlot mocks base method.
func (m *MockRepository) DeleteBannerSlot(ctx context.Context, req *models.BannerSlotRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBannerSlot", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBannerSlot indicates an expected call of DeleteBannerSlot.
func (mr *MockRepositoryMockRecorder) DeleteBannerSlot(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBannerSlot", reflect.TypeOf((*MockRepository)(nil).DeleteBannerSlot), ctx, req)
}

// GetBannersInfo mocks base method.
func (m *MockRepository) GetBannersInfo(ctx context.Context, req *models.NextBannerRequest) ([]models.BannerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannersInfo", ctx, req)
	ret0, _ := ret[0].([]models.BannerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannersInfo indicates an expected call of GetBannersInfo.
func (mr *MockRepositoryMockRecorder) GetBannersInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannersInfo", reflect.TypeOf((*MockRepository)(nil).GetBannersInfo), ctx, req)
}

// IncrementBannerView mocks base method.
func (m *MockRepository) IncrementBannerView(ctx context.Context, req *models.EventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBannerView", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementBannerView indicates an expected call of IncrementBannerView.
func (mr *MockRepositoryMockRecorder) IncrementBannerView(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBannerView", reflect.TypeOf((*MockRepository)(nil).IncrementBannerView), ctx, req)
}

// MockKafka is a mock of MessageBroker interface.
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka.
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance.
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockKafka) SendMessage(BannerID, SlotID, GroupID int64, msgType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", BannerID, SlotID, GroupID, msgType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockKafkaMockRecorder) SendMessage(BannerID, SlotID, GroupID, msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockKafka)(nil).SendMessage), BannerID, SlotID, GroupID, msgType)
}
